name: Deploy Backend to Production

on:
  push:
    branches: [ master, main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'server/backend/**'
      - '.github/workflows/deploy-backend.yml'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build application
        run: |
          ./mvnw clean package -DskipTests -B
          echo "✅ Application built successfully"

      - name: Prepare deployment bundle
        run: |
          rm -rf deployment && mkdir -p deployment
          
          # Copy backend deployment files
          cp -r server/backend/* deployment/
          
          # Copy application files (target/ not needed as Dockerfile rebuilds from source)
          cp pom.xml deployment/
          cp -r src deployment/
          
          # Create production properties
          cp server/backend/application-prod.properties deployment/src/main/resources/
          
          echo "✅ Deployment bundle prepared"

      - name: Stop old backend (ignore if first run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            mkdir -p /var/www/quizmaker-backend
            cd /var/www/quizmaker-backend
            
            # Load environment variables if .env exists
            if [ -f .env ]; then
              echo "🔍 Attempting to load existing environment variables (non-fatal if parsing fails)..."
              set -a
              if ! source .env 2>/dev/null; then
                echo "⚠️ Warning: Failed to parse existing .env file. Continuing without exporting variables."
              fi
              set +a
            fi
            
            # Stop existing containers
            docker compose down || true
            
            # Clean up old images to save space
            docker image prune -f || true
            
            echo "✅ Old backend stopped"

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "deployment/*"
          target: "/var/www/quizmaker-backend/"
          strip_components: 1
          overwrite: true

      - name: Create environment file and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizmaker-backend
            
            # Create .env file from secrets
            cat > .env <<'EOF'
            # Database Configuration
            DB_USERNAME=${{ secrets.DB_PROD_USERNAME || 'quizmaker_user' }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            
            # Security Peppers
            TOKEN_PEPPER_SECRET=${{ secrets.TOKEN_PEPPER_SECRET }}
            RESET_TOKEN_PEPPER=${{ secrets.RESET_TOKEN_PEPPER }}
            VERIFICATION_TOKEN_PEPPER=${{ secrets.VERIFICATION_TOKEN_PEPPER }}
            
            # OpenAI Configuration
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
            
            # Stripe Configuration
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_PRICE_SMALL=${{ secrets.STRIPE_PRICE_SMALL }}
            STRIPE_PRICE_MEDIUM=${{ secrets.STRIPE_PRICE_MEDIUM }}
            STRIPE_PRICE_LARGE=${{ secrets.STRIPE_PRICE_LARGE }}
            STRIPE_PRICE_SUBSCRIPTION=${{ secrets.STRIPE_PRICE_SUBSCRIPTION }}
            
            # Email Configuration
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            
            # Frontend Configuration
            FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL }}
            
            # Billing Configuration (optional)
            BILLING_TOKEN_TO_LLM_RATIO=${{ secrets.BILLING_TOKEN_TO_LLM_RATIO || '1.0' }}
            BILLING_RESERVATION_TTL_MINUTES=${{ secrets.BILLING_RESERVATION_TTL_MINUTES || '30' }}
            BILLING_SAFETY_FACTOR=${{ secrets.BILLING_SAFETY_FACTOR || '1.2' }}
            BILLING_CURRENCY=${{ secrets.BILLING_CURRENCY || 'USD' }}
            EOF
            
            # Set proper permissions
            chmod 600 .env
            
            # Make MySQL init scripts executable
            chmod +x mysql-init/*.sh 2>/dev/null || true
            
            echo "✅ Environment file created"
            echo "📋 Environment file structure (without sensitive values):"
            grep -E "^[A-Z_]+=.*" .env | sed 's/=.*/=[HIDDEN]/' || true
            
            echo "🔍 Debug: Checking specific variables:"
            echo "DB_USERNAME length: $(echo -n "$DB_USERNAME" | wc -c)"
            echo "DB_PASSWORD length: $(echo -n "$DB_PASSWORD" | wc -c)"
            echo "DB_ROOT_PASSWORD length: $(echo -n "$DB_ROOT_PASSWORD" | wc -c)"
            echo "DB_USERNAME value: '$DB_USERNAME'"
            echo "DB_PASSWORD first 3 chars: '$(echo "$DB_PASSWORD" | cut -c1-3)...'"
            echo "DB_ROOT_PASSWORD first 3 chars: '$(echo "$DB_ROOT_PASSWORD" | cut -c1-3)...'"
            
            echo "🔍 Debug: Environment file contents (sanitized):"
            cat .env | sed 's/=.*/=[REDACTED]/' | head -10
            
            echo "🔍 Debug: Checking if .env file exists and is readable:"
            ls -la .env || echo "❌ .env file not found!"
            
            echo "🔍 Debug: First 5 lines of .env file:"
            head -5 .env || echo "❌ Cannot read .env file!"
            
            echo "🔍 Debug: Loading .env file and checking variables:"
            set -a
            if ! source .env 2>/dev/null; then
              echo "⚠️ Warning: Failed to load .env file for debugging output."
            fi
            set +a
            echo "After loading .env:"
            echo "DB_USERNAME: '${DB_USERNAME:-NOT_SET}'"
            echo "DB_PASSWORD length: $(echo -n "${DB_PASSWORD:-}" | wc -c)"
            echo "DB_ROOT_PASSWORD length: $(echo -n "${DB_ROOT_PASSWORD:-}" | wc -c)"

      - name: Build and start backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizmaker-backend
            
            # Load environment variables from .env file
            echo "🔍 Loading environment variables from .env file..."
            set -a
            if ! source .env 2>/dev/null; then
              echo "⚠️ Warning: Failed to load .env file. Docker Compose will still use the .env file directly."
            fi
            set +a
            
            echo "🔍 Environment variables loaded:"
            echo "DB_USERNAME: '${DB_USERNAME:-NOT_SET}'"
            echo "DB_PASSWORD length: $(echo -n "${DB_PASSWORD:-}" | wc -c)"
            echo "DB_ROOT_PASSWORD length: $(echo -n "${DB_ROOT_PASSWORD:-}" | wc -c)"
            
            # Verify docker-compose.yml syntax
            echo "🔍 Verifying Docker Compose configuration..."
            docker compose config --quiet
            
            # Build and start services
            echo "🔨 Building backend container..."
            docker compose build --no-cache
            
            echo "🧹 Clearing MySQL data volume (version compatibility issue)..."
            docker compose down -v || true
            docker volume rm quizmaker-backend_mysql_data || true
            
            echo "🚀 Starting MySQL first..."
            docker compose up -d mysql
            
            echo "⏳ Waiting for MySQL to be ready before starting backend..."
            # Wait for MySQL to be healthy before starting backend
            for i in {1..60}; do
              if docker compose exec mysql mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD --silent 2>/dev/null; then
                echo "✅ MySQL is ready! Starting backend..."
                break
              fi
              
              # Show MySQL logs every 10 attempts
              if [ $((i % 10)) -eq 0 ]; then
                echo "📋 MySQL status (attempt $i/60):"
                docker compose ps mysql
                echo "📋 Recent MySQL logs:"
                docker compose logs --tail=10 mysql
              fi
              
              if [ $i -eq 60 ]; then
                echo "❌ MySQL failed to start after 2 minutes"
                echo "📋 Final MySQL logs:"
                docker compose logs mysql
                echo "📋 MySQL environment variables:"
                docker compose exec mysql env | grep MYSQL || true
                exit 1
              fi
              echo "⏳ MySQL not ready yet, waiting... ($i/60)"
              sleep 2
            done
            
            echo "🚀 Starting backend service..."
            docker compose up -d quizmaker-backend
            
            echo "📋 Initial container status:"
            docker compose ps
            
            echo "📋 Environment variables check:"
            echo "DB_USERNAME: '${DB_USERNAME}'"
            echo "DB_PASSWORD: [HIDDEN - length: $(echo -n "$DB_PASSWORD" | wc -c)]"
            echo "DB_ROOT_PASSWORD: [HIDDEN - length: $(echo -n "$DB_ROOT_PASSWORD" | wc -c)]"
            echo "MYSQL_ROOT_PASSWORD: [HIDDEN - length: $(echo -n "$MYSQL_ROOT_PASSWORD" | wc -c)]"
            
            echo "🔍 Debug: Docker Compose environment variable resolution:"
            docker compose config | grep -A 20 -B 5 "SPRING_DATASOURCE_USERNAME\|MYSQL_USER" || true
            
            echo "⏳ Waiting for backend to be ready..."
            # Wait for backend to be healthy
            for i in {1..30}; do
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Backend is ready!"
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "❌ Backend failed to start"
                echo "📋 Container status:"
                docker compose ps
                echo "📋 Backend logs:"
                docker compose logs --tail=50 quizmaker-backend
                exit 1
              fi
              echo "⏳ Backend not ready yet, waiting... ($i/30)"
              sleep 5
            done
            
            echo "✅ Backend containers started"

      - name: Wait for backend to be healthy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizmaker-backend
            
            # Load environment variables from .env file
            set -a
            if ! source .env 2>/dev/null; then
              echo "⚠️ Warning: Failed to load .env file for health check step."
            fi
            set +a
            
            echo "⏳ Waiting for backend to be healthy..."
            
            # Wait up to 5 minutes for the backend to be healthy
            for i in {1..60}; do
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Backend is healthy!"
                break
              fi
              
              if [ $i -eq 60 ]; then
                echo "❌ Backend health check timeout"
                echo "📋 Container status:"
                docker compose ps
                echo "📋 Backend logs:"
                docker compose logs --tail=50 quizmaker-backend
                echo "📋 MySQL logs:"
                docker compose logs --tail=50 mysql
                exit 1
              fi
              
              echo "⏳ Attempt $i/60: Backend not ready yet, waiting..."
              sleep 5
            done
            
            echo "🎉 Backend deployment completed successfully!"
            
            # Show final status
            echo "📊 Final container status:"
            docker compose ps
            
            echo "🌐 Backend should be available at:"
            echo "   - Health: https://quizzence.com/actuator/health"
            echo "   - API Docs: https://quizzence.com/api/v1/docs/swagger-ui.html"

      - name: Cleanup deployment files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/quizmaker-backend
            
            # Load environment variables if .env exists
            if [ -f .env ]; then
              echo "🔍 Attempting to load existing environment variables during cleanup (non-fatal if parsing fails)..."
              set -a
              if ! source .env 2>/dev/null; then
                echo "⚠️ Warning: Failed to parse existing .env file during cleanup."
              fi
              set +a
            fi
            
            # Clean up old Docker images to save space
            docker image prune -f || true
            echo "✅ Cleanup completed"
