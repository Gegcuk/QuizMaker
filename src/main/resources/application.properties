# app name
spring.application.name=QuizMaker
# MySQL connection (CI or local)
spring.datasource.url=jdbc:mysql://localhost:3306/quizmakerdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=bestuser
spring.datasource.password=bestuser
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# JPA / Hibernate
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# Use Hibernate schema management for now; migrations will take over later
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
logging.level.org.springframework=DEBUG
logging.level.uk.gegc.quizmaker=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.orm.jpa=DEBUG
spring.config.import=optional:classpath:secret.properties,optional:file:.env[.properties]
jwt.secret=${JWT_SECRET:your-super-secret-jwt-key-change-this-in-production}
jwt.access-expiration-ms=43200000
jwt.refresh-expiration-ms=604800000
# serve the raw OpenAPI JSON under /api/v1/docs
springdoc.api-docs.path=/api/v1/docs
# serve the Swagger-UI HTML under /api/v1/docs/swagger-ui.html
springdoc.swagger-ui.path=/api/v1/docs/swagger-ui.html
# point the UI itself at your new JSON location
springdoc.swagger-ui.url=/api/v1/docs
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
# Document Processing Configuration
document.chunking.max-chunk-size=100000
document.chunking.min-chunk-size=1000
document.chunking.aggressive-combination-threshold=5000
document.chunking.default-strategy=CHAPTER_BASED
# File Upload Configuration
spring.servlet.multipart.max-file-size=150MB
spring.servlet.multipart.max-request-size=150MB
spring.servlet.multipart.enabled=true

# DocumentProcess Configuration
docproc.normalization.dehyphenate=true
docproc.normalization.collapse-spaces=true
docproc.ai.default-model=gpt-4o-mini
docproc.ai.headroom-ratio=0.25
# OpenAI Configuration
spring.ai.openai.api-key=${OPENAI_API_KEY}

# Clock Configuration
# Default timezone for the application Clock
# Options: UTC, Europe/London, America/New_York, etc.
app.timezone=UTC
spring.ai.openai.chat.options.model=${OPENAI_MODEL:gpt-4.1-mini}

# Feature flags (Day-0 default: on in dev, can override in prod)
quizmaker.features.share-links=true
quizmaker.features.organizations=true
quizmaker.features.billing=true

# Admin feature flags
app.admin.system-initialization.enabled=true

# Share Links security
quizmaker.share-links.token-pepper=${TOKEN_PEPPER_SECRET}

# Enable Problem+JSON standardized errors
spring.mvc.problemdetails.enabled=true

# Enable Flyway by default
spring.flyway.enabled=true
# Temporarily disable validation to bypass corrupted schema history
spring.flyway.validate-on-migrate=false
spring.flyway.clean-disabled=false

# AI Rate Limiting Configuration
ai.rate-limit.max-retries=5
ai.rate-limit.base-delay-ms=1000
ai.rate-limit.max-delay-ms=60000
ai.rate-limit.jitter-factor=0.25

# Async Configuration
# AI Operations Thread Pool
async.ai.core-pool-size=4
async.ai.max-pool-size=8
async.ai.queue-capacity=50
async.ai.keep-alive-seconds=60

# General Operations Thread Pool
async.general.core-pool-size=2
async.general.max-pool-size=4
async.general.queue-capacity=25
async.general.keep-alive-seconds=60

# CORS Configuration
# Allowed origins - Configure based on your frontend URLs
# For production, replace with your actual domain(s)
app.cors.allowed-origins=http://localhost:3000,http://localhost:4200,http://localhost:5173
# For development with dynamic ports (e.g., Vite), set this to true
app.cors.use-origin-patterns=false
# Allowed HTTP methods including HEAD for cache validation
app.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS,HEAD
# Allowed headers in requests - add more as needed
app.cors.allowed-headers=Authorization,Content-Type,Accept,X-Requested-With,Origin,If-None-Match,Accept-Language
# Headers exposed to the client (response headers the browser can access)
app.cors.exposed-headers=Location,Link,Content-Disposition,X-Total-Count,X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset
# Allow credentials (cookies, authorization headers) - set to false if using only JWT in header
app.cors.allow-credentials=true
# Max age for preflight cache (1 hour)
app.cors.max-age=3600

# Email Configuration (SMTP - legacy, used when app.email.provider=smtp)
# NOTE: SMTP is deprecated in favor of AWS SES. Only use if SES is unavailable.
spring.mail.host=${SMTP_HOST:smtp.example.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:}
spring.mail.password=${SMTP_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=${SMTP_USE_TLS:true}
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.default-encoding=UTF-8

# Frontend Configuration
app.frontend.base-url=${FRONTEND_BASE_URL:http://localhost:3000}

# Email Provider Configuration
# Options: ses (AWS SES via HTTPS), smtp (legacy SMTP), noop (logging only, no sending)
# Default: noop (safe for local dev)
app.email.provider=${APP_EMAIL_PROVIDER:noop}
# Sender email address (must be verified in SES if using provider=ses)
app.email.from=${APP_EMAIL_FROM:noreply@example.com}
# AWS region for SES (only used when provider=ses)
app.email.region=${APP_EMAIL_REGION:us-east-1}
# Optional: SES Configuration Set name for event tracking
app.email.ses.configuration-set=${APP_EMAIL_SES_CONFIGURATION_SET:}
# Max timeout for an SES API call (milliseconds)
app.email.ses.api-call-timeout-ms=${APP_EMAIL_SES_API_CALL_TIMEOUT_MS:30000}
# Timeout per HTTP attempt (milliseconds)
app.email.ses.api-call-attempt-timeout-ms=${APP_EMAIL_SES_API_CALL_ATTEMPT_TIMEOUT_MS:10000}
# HTTP connection timeout (milliseconds)
app.email.ses.http-connection-timeout-ms=${APP_EMAIL_SES_HTTP_CONNECTION_TIMEOUT_MS:5000}
# HTTP socket/read timeout (milliseconds)
app.email.ses.http-socket-timeout-ms=${APP_EMAIL_SES_HTTP_SOCKET_TIMEOUT_MS:15000}
# Email template resource locations (plain text for now)
app.email.templates.password-reset=${APP_EMAIL_TEMPLATE_PASSWORD_RESET:classpath:email/password-reset-email.txt}
app.email.templates.verification=${APP_EMAIL_TEMPLATE_EMAIL_VERIFICATION:classpath:email/email-verification-email.txt}

# Email Application Configuration
app.email.password-reset.subject=Password Reset Request - QuizMaker
app.email.verification.subject=Email Verification - QuizMaker

# Auth Configuration
app.auth.reset-token-ttl-minutes=60
app.auth.reset-token-pepper=${RESET_TOKEN_PEPPER:please_set_a_strong_random_value}
app.auth.verification-token-ttl-minutes=1440
app.auth.verification-token-pepper=${VERIFICATION_TOKEN_PEPPER:please_set_a_strong_random_value}

# Security Configuration
app.security.enable-forwarded-headers=${ENABLE_FORWARDED_HEADERS:false}
app.security.trusted-proxies=${TRUSTED_PROXIES:127.0.0.1,::1,localhost}

# Document Chunking Configuration
quizmaker.document.chunking.max-single-chunk-tokens=150000
quizmaker.document.chunking.max-single-chunk-chars=4000000
quizmaker.document.chunking.overlap-tokens=15000
quizmaker.document.chunking.model-max-tokens=400000
quizmaker.document.chunking.prompt-overhead-tokens=15000
quizmaker.document.chunking.aggressive-chunking=true
quizmaker.document.chunking.enable-emergency-chunking=true

# Billing Configuration
billing.token-to-llm-ratio=${BILLING_TOKEN_TO_LLM_RATIO:1000}
billing.reservation-ttl-minutes=${BILLING_RESERVATION_TTL_MINUTES:120}
billing.reservation-sweeper-ms=${BILLING_RESERVATION_SWEEPER_MS:60000}
billing.safety-factor=${BILLING_SAFETY_FACTOR:1.2}
billing.currency=${BILLING_CURRENCY:usd}
billing.refund-policy=${BILLING_REFUND_POLICY:ALLOW_NEGATIVE_BALANCE}

# Stripe Configuration
# Note: do not set defaults for secret keys to avoid creating empty-key clients.
# Provide via environment variables or externalized config.
stripe.secret-key=${STRIPE_SECRET_KEY}
stripe.webhook-secret=${STRIPE_WEBHOOK_SECRET}
stripe.publishable-key=${STRIPE_PUBLISHABLE_KEY:pk_test_...}
stripe.success-url=${STRIPE_SUCCESS_URL:${app.frontend.base-url}/billing/success}
stripe.cancel-url=${STRIPE_CANCEL_URL:${app.frontend.base-url}/billing/cancel}
stripe.price.small=${STRIPE_PRICE_SMALL}
stripe.price.medium=${STRIPE_PRICE_MEDIUM}
stripe.price.large=${STRIPE_PRICE_LARGE}
stripe.price.subscription=${STRIPE_PRICE_SUBSCRIPTION}

# Additional relaxed-binding keys to map to StripeProperties fields directly
stripe.priceSmall=${STRIPE_PRICE_SMALL}
stripe.priceMedium=${STRIPE_PRICE_MEDIUM}
stripe.priceLarge=${STRIPE_PRICE_LARGE}
stripe.priceSubscription=${STRIPE_PRICE_SUBSCRIPTION}

# Quiz Generation Job Resilience Configuration
# Timeout for PENDING jobs to transition to PROCESSING (minutes)
quiz.jobs.pending-activation-timeout-minutes=2
# Fixed delay between cleanup scheduler runs (seconds)
quiz.jobs.cleanup-fixed-delay-seconds=60
# Minimum age for cancellation via API (seconds, 0 = immediate)
quiz.jobs.min-cancel-age-seconds=0
# Cancellation policy: commit tokens if work started
quiz.jobs.cancellation.commit-on-cancel=true
quiz.jobs.cancellation.min-start-fee-tokens=0
# Rate limits for job operations
quiz.jobs.rate-limit.start.per-minute=3
quiz.jobs.rate-limit.start.per-hour=15
quiz.jobs.rate-limit.start.per-day=100
quiz.jobs.rate-limit.cancel.per-hour=5
quiz.jobs.rate-limit.cancel.per-day=50
quiz.jobs.rate-limit.cooldown-on-rapid-cancels-minutes=5
