package uk.gegc.quizmaker.features.quiz.application.generation.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import uk.gegc.quizmaker.features.category.domain.model.Category;
import uk.gegc.quizmaker.features.category.domain.repository.CategoryRepository;
import uk.gegc.quizmaker.features.question.domain.model.Difficulty;
import uk.gegc.quizmaker.features.question.domain.model.Question;
import uk.gegc.quizmaker.features.question.domain.model.QuestionType;
import uk.gegc.quizmaker.features.quiz.api.dto.GenerateQuizFromDocumentRequest;
import uk.gegc.quizmaker.features.quiz.api.dto.QuizScope;
import uk.gegc.quizmaker.features.quiz.domain.model.Quiz;
import uk.gegc.quizmaker.features.quiz.domain.model.QuizStatus;
import uk.gegc.quizmaker.features.quiz.domain.model.Visibility;
import uk.gegc.quizmaker.features.quiz.domain.repository.QuizRepository;
import uk.gegc.quizmaker.features.tag.domain.model.Tag;
import uk.gegc.quizmaker.features.tag.domain.repository.TagRepository;
import uk.gegc.quizmaker.features.user.domain.model.User;

import java.util.*;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * Comprehensive unit tests for QuizAssemblyServiceImpl.
 * 
 * <p>Tests cover:
 * - Chunk quiz creation with various scenarios
 * - Consolidated quiz creation
 * - Unique title generation edge cases
 * - Chunk title generation variations
 * - Category and tag resolution
 * - Edge cases and defensive programming
 */
@ExtendWith(MockitoExtension.class)
@org.mockito.junit.jupiter.MockitoSettings(strictness = org.mockito.quality.Strictness.LENIENT)
@DisplayName("QuizAssemblyServiceImpl Tests")
class QuizAssemblyServiceImplTest {

    @Mock
    private QuizRepository quizRepository;
    
    @Mock
    private CategoryRepository categoryRepository;
    
    @Mock
    private TagRepository tagRepository;
    
    @InjectMocks
    private QuizAssemblyServiceImpl assemblyService;
    
    private User testUser;
    private Category aiCategory;
    private Category generalCategory;
    private Set<Tag> tags;
    private List<Question> questions;
    private GenerateQuizFromDocumentRequest request;
    private UUID documentId;
    
    @BeforeEach
    void setUp() {
        testUser = createUser("testuser", UUID.randomUUID());
        
        aiCategory = new Category();
        aiCategory.setId(UUID.randomUUID());
        aiCategory.setName("AI Generated");
        aiCategory.setDescription("Quizzes automatically generated by AI");
        
        generalCategory = new Category();
        generalCategory.setId(UUID.randomUUID());
        generalCategory.setName("General");
        
        Tag tag1 = new Tag();
        tag1.setId(UUID.randomUUID());
        tag1.setName("Java");
        
        Tag tag2 = new Tag();
        tag2.setId(UUID.randomUUID());
        tag2.setName("Programming");
        
        tags = new HashSet<>(Set.of(tag1, tag2));
        
        questions = List.of(
            createQuestion("What is Java?", QuestionType.MCQ_SINGLE),
            createQuestion("What is OOP?", QuestionType.MCQ_SINGLE),
            createQuestion("What is inheritance?", QuestionType.MCQ_SINGLE)
        );
        
        documentId = UUID.randomUUID();
        
        request = new GenerateQuizFromDocumentRequest(
            documentId,
            QuizScope.ENTIRE_DOCUMENT,
            null,
            null,
            null,
            "Sample Quiz",
            "Sample Description",
            Map.of(QuestionType.MCQ_SINGLE, 3),
            Difficulty.MEDIUM,
            10,
            null,
            List.of(tag1.getId(), tag2.getId())
        );
    }
    
    // =============== getOrCreateAICategory Tests ===============
    
    @Nested
    @DisplayName("getOrCreateAICategory() Tests")
    class GetOrCreateAICategoryTests {
        
        @Test
        @DisplayName("AI Generated category exists - returns it")
        void aiCategoryExists_returnsIt() {
            // Given
            when(categoryRepository.findByName("AI Generated")).thenReturn(Optional.of(aiCategory));
            
            // When
            Category result = assemblyService.getOrCreateAICategory();
            
            // Then
            assertThat(result).isEqualTo(aiCategory);
            verify(categoryRepository).findByName("AI Generated");
            verify(categoryRepository, never()).save(any());
        }
        
        @Test
        @DisplayName("AI Generated doesn't exist but General exists - returns General")
        void aiCategoryMissingGeneralExists_returnsGeneral() {
            // Given
            when(categoryRepository.findByName("AI Generated")).thenReturn(Optional.empty());
            when(categoryRepository.findByName("General")).thenReturn(Optional.of(generalCategory));
            
            // When
            Category result = assemblyService.getOrCreateAICategory();
            
            // Then
            assertThat(result).isEqualTo(generalCategory);
            verify(categoryRepository).findByName("AI Generated");
            verify(categoryRepository).findByName("General");
            verify(categoryRepository, never()).save(any());
        }
        
        @Test
        @DisplayName("Neither AI Generated nor General exists - creates AI Generated")
        void noCategoriesExist_createsAIGenerated() {
            // Given
            when(categoryRepository.findByName("AI Generated")).thenReturn(Optional.empty());
            when(categoryRepository.findByName("General")).thenReturn(Optional.empty());
            when(categoryRepository.save(any(Category.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Category result = assemblyService.getOrCreateAICategory();
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getName()).isEqualTo("AI Generated");
            assertThat(result.getDescription()).isEqualTo("Quizzes automatically generated by AI");
            
            ArgumentCaptor<Category> categoryCaptor = ArgumentCaptor.forClass(Category.class);
            verify(categoryRepository).save(categoryCaptor.capture());
            assertThat(categoryCaptor.getValue().getName()).isEqualTo("AI Generated");
        }
    }
    
    // =============== resolveTags Tests ===============
    
    @Nested
    @DisplayName("resolveTags() Tests")
    class ResolveTagsTests {
        
        @Test
        @DisplayName("Request with valid tag IDs - returns tags")
        void validTagIds_returnsTags() {
            // Given
            UUID tag1Id = UUID.randomUUID();
            UUID tag2Id = UUID.randomUUID();
            Tag tag1 = new Tag();
            tag1.setId(tag1Id);
            Tag tag2 = new Tag();
            tag2.setId(tag2Id);
            
            GenerateQuizFromDocumentRequest requestWithTags = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Title", "Desc", Map.of(), Difficulty.MEDIUM, 10, null,
                List.of(tag1Id, tag2Id)
            );
            
            when(tagRepository.findById(tag1Id)).thenReturn(Optional.of(tag1));
            when(tagRepository.findById(tag2Id)).thenReturn(Optional.of(tag2));
            
            // When
            Set<Tag> result = assemblyService.resolveTags(requestWithTags);
            
            // Then
            assertThat(result).hasSize(2);
            assertThat(result).contains(tag1, tag2);
        }
        
        @Test
        @DisplayName("Request with null tag IDs - returns empty set")
        void nullTagIds_returnsEmptySet() {
            // Given
            GenerateQuizFromDocumentRequest requestNoTags = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Title", "Desc", Map.of(), Difficulty.MEDIUM, 10, null,
                null
            );
            
            // When
            Set<Tag> result = assemblyService.resolveTags(requestNoTags);
            
            // Then
            assertThat(result).isEmpty();
            verify(tagRepository, never()).findById(any());
        }
        
        @Test
        @DisplayName("Some tag IDs not found - returns only existing tags")
        void someTagsNotFound_returnsOnlyExisting() {
            // Given
            UUID existingId = UUID.randomUUID();
            UUID missingId = UUID.randomUUID();
            Tag existingTag = new Tag();
            existingTag.setId(existingId);
            
            GenerateQuizFromDocumentRequest requestMixedTags = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Title", "Desc", Map.of(), Difficulty.MEDIUM, 10, null,
                List.of(existingId, missingId)
            );
            
            when(tagRepository.findById(existingId)).thenReturn(Optional.of(existingTag));
            when(tagRepository.findById(missingId)).thenReturn(Optional.empty());
            
            // When
            Set<Tag> result = assemblyService.resolveTags(requestMixedTags);
            
            // Then
            assertThat(result).hasSize(1);
            assertThat(result).contains(existingTag);
        }
        
        @Test
        @DisplayName("Empty tag IDs list - returns empty set")
        void emptyTagIds_returnsEmptySet() {
            // Given
            GenerateQuizFromDocumentRequest requestEmptyTags = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Title", "Desc", Map.of(), Difficulty.MEDIUM, 10, null,
                List.of()
            );
            
            // When
            Set<Tag> result = assemblyService.resolveTags(requestEmptyTags);
            
            // Then
            assertThat(result).isEmpty();
        }
    }
    
    // =============== createChunkQuiz Tests ===============
    
    @Nested
    @DisplayName("createChunkQuiz() Tests")
    class CreateChunkQuizTests {
        
        @Test
        @DisplayName("Creates chunk quiz with correct defaults")
        void createsChunkQuizWithCorrectDefaults() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getCreator()).isEqualTo(testUser);
            assertThat(result.getCategory()).isEqualTo(aiCategory);
            assertThat(result.getTags()).isEqualTo(tags);
            assertThat(result.getStatus()).isEqualTo(QuizStatus.PUBLISHED);
            assertThat(result.getVisibility()).isEqualTo(Visibility.PRIVATE);
            assertThat(result.getDifficulty()).isEqualTo(Difficulty.MEDIUM);
            assertThat(result.getIsTimerEnabled()).isFalse();
            assertThat(result.getIsRepetitionEnabled()).isFalse();
            
            verify(quizRepository).save(result);
        }
        
        @Test
        @DisplayName("Chunk quiz has questions assigned")
        void chunkQuiz_hasQuestionsAssigned() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result.getQuestions()).hasSize(3);
            assertThat(result.getQuestions()).containsAll(questions);
        }
        
        @Test
        @DisplayName("Chunk quiz calculates estimated time correctly")
        void chunkQuiz_calculatesEstimatedTime() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When - 3 questions * 1.5 = 4.5, rounded up = 5
            Quiz result = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result.getEstimatedTime()).isEqualTo(5); // max(2, ceil(3 * 1.5))
        }
        
        @Test
        @DisplayName("Chunk quiz with single question - uses minimum time")
        void chunkQuiz_singleQuestion_usesMinimumTime() {
            // Given
            List<Question> singleQuestion = List.of(createQuestion("Single question?", QuestionType.MCQ_SINGLE));
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When - 1 question * 1.5 = 1.5, rounded up = 2, but minimum is 1
            Quiz result = assemblyService.createChunkQuiz(testUser, singleQuestion, 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result.getEstimatedTime()).isEqualTo(2); // ceil(1 * 1.5) = 2
        }
        
        @Test
        @DisplayName("Chunk quiz title is unique")
        void chunkQuiz_titleIsUnique() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result.getTitle()).isNotBlank();
            assertThat(result.getTitle()).startsWith("Quiz: What is Java?");
            assertThat(result.getTitle()).contains("(");
            assertThat(result.getTitle()).matches("^Quiz: What is Java\\? \\([a-f0-9-]{8}\\)$");
            verify(quizRepository).existsByCreatorIdAndTitle(testUser.getId(), result.getTitle());
        }
        
        @Test
        @DisplayName("Chunk quiz with empty questions - still creates quiz")
        void chunkQuiz_emptyQuestions_createsQuiz() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createChunkQuiz(testUser, List.of(), 1, request, aiCategory, tags, documentId);
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getQuestions()).isEmpty();
            assertThat(result.getEstimatedTime()).isEqualTo(1); // minimum (0 * 1.5 = 0, max with 1)
        }
    }
    
    // =============== createConsolidatedQuiz Tests ===============
    
    @Nested
    @DisplayName("createConsolidatedQuiz() Tests")
    class CreateConsolidatedQuizTests {
        
        @Test
        @DisplayName("Creates consolidated quiz with custom title and description")
        void createsConsolidatedQuiz_withCustomTitleAndDescription() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, request, aiCategory, tags, documentId, 3);
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getTitle()).isEqualTo("Sample Quiz");
            assertThat(result.getDescription()).isEqualTo("Sample Description");
            assertThat(result.getCreator()).isEqualTo(testUser);
            assertThat(result.getCategory()).isEqualTo(aiCategory);
            assertThat(result.getTags()).isEqualTo(tags);
        }
        
        @Test
        @DisplayName("Consolidated quiz with null title - uses default")
        void consolidatedQuiz_nullTitle_usesDefault() {
            // Given
            GenerateQuizFromDocumentRequest requestNoTitle = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                null, "Description", Map.of(), Difficulty.MEDIUM, 10, null, List.of()
            );
            
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, requestNoTitle, aiCategory, tags, documentId, 3);
            
            // Then
            assertThat(result.getTitle()).isEqualTo("Complete Document Quiz");
        }
        
        @Test
        @DisplayName("Consolidated quiz with null description - uses default")
        void consolidatedQuiz_nullDescription_usesDefault() {
            // Given
            GenerateQuizFromDocumentRequest requestNoDesc = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Custom Title", null, Map.of(), Difficulty.MEDIUM, 10, null, List.of()
            );
            
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, requestNoDesc, aiCategory, tags, documentId, 5);
            
            // Then
            assertThat(result.getDescription()).isEqualTo("Comprehensive quiz covering all 5 sections of the document");
        }
        
        @Test
        @DisplayName("Consolidated quiz sets correct status and visibility")
        void consolidatedQuiz_setsCorrectStatusAndVisibility() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, request, aiCategory, tags, documentId, 3);
            
            // Then
            assertThat(result.getStatus()).isEqualTo(QuizStatus.PUBLISHED);
            assertThat(result.getVisibility()).isEqualTo(Visibility.PRIVATE);
        }
        
        @Test
        @DisplayName("Consolidated quiz calculates estimated time from all questions")
        void consolidatedQuiz_calculatesEstimatedTime() {
            // Given
            List<Question> manyQuestions = new ArrayList<>();
            for (int i = 0; i < 10; i++) {
                manyQuestions.add(createQuestion("Question " + i, QuestionType.MCQ_SINGLE));
            }
            
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When - 10 questions * 1.5 = 15
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, manyQuestions, request, aiCategory, tags, documentId, 5);
            
            // Then
            assertThat(result.getEstimatedTime()).isEqualTo(15);
        }
        
        @Test
        @DisplayName("Consolidated quiz assigns all questions")
        void consolidatedQuiz_assignsAllQuestions() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, request, aiCategory, tags, documentId, 3);
            
            // Then
            assertThat(result.getQuestions()).hasSize(3);
            assertThat(result.getQuestions()).containsAll(questions);
        }
    }
    
    // =============== generateChunkTitle Tests ===============
    
    @Nested
    @DisplayName("generateChunkTitle() Tests")
    class GenerateChunkTitleTests {
        
        @Test
        @DisplayName("Generates title from first question (first 5 words)")
        void generatesTitle_fromFirstQuestion() {
            // Given
            List<Question> questionsWithLongText = List.of(
                createQuestion("What is the purpose of object oriented programming in modern software development?", QuestionType.MCQ_SINGLE)
            );
            
            // When
            String result = assemblyService.generateChunkTitle(1, questionsWithLongText);
            
            // Then
            assertThat(result).startsWith("What is the purpose of");
            assertThat(result).contains("(");
            assertThat(result).matches(".*\\([a-f0-9-]{8}\\)$"); // UUID pattern
        }
        
        @Test
        @DisplayName("Empty questions list - uses section number")
        void emptyQuestions_usesSectionNumber() {
            // When
            String result = assemblyService.generateChunkTitle(5, List.of());
            
            // Then
            assertThat(result).startsWith("Section 5");
            assertThat(result).matches("Section 5 \\([a-f0-9-]{8}\\)");
        }
        
        @Test
        @DisplayName("Null questions list - uses section number")
        void nullQuestions_usesSectionNumber() {
            // When
            String result = assemblyService.generateChunkTitle(3, null);
            
            // Then
            assertThat(result).startsWith("Section 3");
        }
        
        @Test
        @DisplayName("Question with short text (< 3 words) - uses section number")
        void shortQuestionText_usesSectionNumber() {
            // Given
            List<Question> shortQuestions = List.of(
                createQuestion("Hello world", QuestionType.MCQ_SINGLE)
            );
            
            // When
            String result = assemblyService.generateChunkTitle(2, shortQuestions);
            
            // Then
            assertThat(result).startsWith("Section 2");
        }
        
        @Test
        @DisplayName("Question with null text - uses section number")
        void nullQuestionText_usesSectionNumber() {
            // Given
            Question questionWithoutText = new Question();
            questionWithoutText.setQuestionText(null);
            
            // When
            String result = assemblyService.generateChunkTitle(4, List.of(questionWithoutText));
            
            // Then
            assertThat(result).startsWith("Section 4");
        }
        
        @Test
        @DisplayName("Question with exactly 5 words - uses all")
        void fiveWordQuestion_usesAll() {
            // Given
            List<Question> fiveWordQuestions = List.of(
                createQuestion("What is object oriented programming?", QuestionType.MCQ_SINGLE)
            );
            
            // When
            String result = assemblyService.generateChunkTitle(1, fiveWordQuestions);
            
            // Then
            assertThat(result).startsWith("What is object oriented programming");
        }
        
        @Test
        @DisplayName("Each invocation generates unique ID")
        void generatesUniqueId_eachInvocation() {
            // When
            String result1 = assemblyService.generateChunkTitle(1, questions);
            String result2 = assemblyService.generateChunkTitle(1, questions);
            
            // Then
            assertThat(result1).isNotEqualTo(result2); // Different UUIDs
        }
    }
    
    // =============== ensureUniqueTitle Tests ===============
    
    @Nested
    @DisplayName("ensureUniqueTitle() Tests")
    class EnsureUniqueTitleTests {
        
        @Test
        @DisplayName("Title doesn't exist - returns as is")
        void titleDoesntExist_returnsAsIs() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Unique Title"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Unique Title");
            
            // Then
            assertThat(result).isEqualTo("Unique Title");
        }
        
        @Test
        @DisplayName("Title exists - appends -2")
        void titleExists_appends2() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Existing Title"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Existing Title-2"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Existing Title");
            
            // Then
            assertThat(result).isEqualTo("Existing Title-2");
        }
        
        @Test
        @DisplayName("Title with -2 exists - appends -3")
        void titleWithSuffix2Exists_appends3() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-2"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-3"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title-2");
            
            // Then
            assertThat(result).isEqualTo("Title-3");
        }
        
        @Test
        @DisplayName("Multiple titles exist - finds next available")
        void multipleTitlesExist_findsNextAvailable() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-2"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-3"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-4"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title");
            
            // Then
            assertThat(result).isEqualTo("Title-4");
        }
        
        @Test
        @DisplayName("Null title - uses default 'Untitled Quiz'")
        void nullTitle_usesDefault() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Untitled Quiz"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, null);
            
            // Then
            assertThat(result).isEqualTo("Untitled Quiz");
        }
        
        @Test
        @DisplayName("Empty title - uses default 'Untitled Quiz'")
        void emptyTitle_usesDefault() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Untitled Quiz"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "   ");
            
            // Then
            assertThat(result).isEqualTo("Untitled Quiz");
        }
        
        @Test
        @DisplayName("Title longer than 100 chars - truncates")
        void longTitle_truncates() {
            // Given
            String longTitle = "A".repeat(150);
            String truncated = "A".repeat(100);
            
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), truncated))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, longTitle);
            
            // Then
            assertThat(result).hasSize(100);
            assertThat(result).isEqualTo(truncated);
        }
        
        @Test
        @DisplayName("Long title exists - truncates and adds suffix")
        void longTitleExists_truncatesAndAddsSuffix() {
            // Given
            String longTitle = "A".repeat(150);
            String truncated = "A".repeat(100);
            
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), truncated))
                .thenReturn(true);
            // After truncation for suffix: 100 - 2 ("-2") = 98
            String expectedBase = "A".repeat(98);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), expectedBase + "-2"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, longTitle);
            
            // Then
            assertThat(result).isEqualTo(expectedBase + "-2");
            assertThat(result).hasSize(100); // 98 + "-2"
        }
        
        @Test
        @DisplayName("Title with trailing spaces - trims correctly")
        void titleWithTrailingSpaces_trimsCorrectly() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title   ");
            
            // Then
            assertThat(result).isEqualTo("Title");
        }
        
        @Test
        @DisplayName("Null user - throws exception")
        void nullUser_throwsException() {
            // When & Then
            assertThatThrownBy(() -> assemblyService.ensureUniqueTitle(null, "Title"))
                .isInstanceOf(NullPointerException.class)
                .hasMessageContaining("Creator must be provided");
        }
        
        @Test
        @DisplayName("Title exists multiple times - finds next available number")
        void titleExistsMultipleTimes_findsNext() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Popular"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Popular-2"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Popular-3"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Popular-4"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Popular-5"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Popular");
            
            // Then
            assertThat(result).isEqualTo("Popular-5");
        }
        
        @Test
        @DisplayName("Strips existing numeric suffix before adding new one")
        void stripsExistingSuffix_beforeAddingNew() {
            // Given
            // First checks "Title-5" (the input as-is)
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-5"))
                .thenReturn(true);
            // Then strips to "Title" and tries "Title-2"
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-2"))
                .thenReturn(false);
            
            // When - Input has "-5" suffix
            String result = assemblyService.ensureUniqueTitle(testUser, "Title-5");
            
            // Then - Should strip -5 and try Title-2
            assertThat(result).isEqualTo("Title-2");
        }
        
        @Test
        @DisplayName("Title with multiple trailing hyphens - preserves as is if unique")
        void titleWithMultipleHyphens_preservesIfUnique() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title---"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title---");
            
            // Then
            assertThat(result).isEqualTo("Title---");
        }
        
        @Test
        @DisplayName("Title is only hyphens - preserves as is")
        void titleOnlyHyphens_preservesAsIs() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "---"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "---");
            
            // Then - Empty string after trim results in "Untitled Quiz", but "---" is not empty
            assertThat(result).isEqualTo("---");
        }
    }
    
    // =============== Edge Cases and Integration Tests ===============
    
    @Nested
    @DisplayName("Edge Cases and Complex Scenarios")
    class EdgeCasesTests {
        
        @Test
        @DisplayName("Chunk quiz with no tags - creates successfully")
        void chunkQuiz_noTags_succeeds() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, new HashSet<>(), documentId);
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getTags()).isEmpty();
        }
        
        @Test
        @DisplayName("Consolidated quiz with no tags - creates successfully")
        void consolidatedQuiz_noTags_succeeds() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, request, aiCategory, new HashSet<>(), documentId, 3);
            
            // Then
            assertThat(result).isNotNull();
            assertThat(result.getTags()).isEmpty();
        }
        
        @Test
        @DisplayName("Title truncation preserves word boundaries")
        void titleTruncation_preservesWordBoundaries() {
            // Given
            // Create a title that's exactly at boundary with trailing spaces
            String titleWithSpaces = "A".repeat(95) + "     extra";
            
            when(quizRepository.existsByCreatorIdAndTitle(eq(testUser.getId()), any()))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, titleWithSpaces);
            
            // Then
            assertThat(result).hasSize(95); // Stripped trailing spaces
            assertThat(result).isEqualTo("A".repeat(95));
        }
        
        @Test
        @DisplayName("Quiz creation saves to repository")
        void quizCreation_savesToRepository() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            
            // Then
            ArgumentCaptor<Quiz> quizCaptor = ArgumentCaptor.forClass(Quiz.class);
            verify(quizRepository).save(quizCaptor.capture());
            assertThat(quizCaptor.getValue().getCreator()).isEqualTo(testUser);
        }
        
        @Test
        @DisplayName("Chunk index variation doesn't affect quiz properties")
        void differentChunkIndices_createSimilarQuizzes() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz chunk1 = assemblyService.createChunkQuiz(testUser, questions, 1, request, aiCategory, tags, documentId);
            Quiz chunk5 = assemblyService.createChunkQuiz(testUser, questions, 5, request, aiCategory, tags, documentId);
            
            // Then - Both have same properties except title
            assertThat(chunk1.getStatus()).isEqualTo(chunk5.getStatus());
            assertThat(chunk1.getVisibility()).isEqualTo(chunk5.getVisibility());
            assertThat(chunk1.getDifficulty()).isEqualTo(chunk5.getDifficulty());
            assertThat(chunk1.getEstimatedTime()).isEqualTo(chunk5.getEstimatedTime());
        }
        
        @Test
        @DisplayName("Consolidated quiz with many chunks - description includes count")
        void consolidatedQuiz_manyChunks_includesCount() {
            // Given
            GenerateQuizFromDocumentRequest requestNoDesc = new GenerateQuizFromDocumentRequest(
                documentId, QuizScope.ENTIRE_DOCUMENT, null, null, null,
                "Title", null, Map.of(), Difficulty.MEDIUM, 10, null, List.of()
            );
            
            when(quizRepository.existsByCreatorIdAndTitle(any(), any())).thenReturn(false);
            when(quizRepository.save(any(Quiz.class))).thenAnswer(invocation -> invocation.getArgument(0));
            
            // When
            Quiz result = assemblyService.createConsolidatedQuiz(testUser, questions, requestNoDesc, aiCategory, tags, documentId, 10);
            
            // Then
            assertThat(result.getDescription()).contains("10 sections");
        }
    }
    
    // =============== Title Edge Cases - Defensive Programming ===============
    
    @Nested
    @DisplayName("Title Generation Edge Cases")
    class TitleEdgeCasesTests {
        
        @Test
        @DisplayName("Title with non-numeric suffix (Title-abc) - doesn't strip")
        void titleWithNonNumericSuffix_doesntStrip() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-abc"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-abc-2"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title-abc");
            
            // Then
            assertThat(result).isEqualTo("Title-abc-2");
        }
        
        @Test
        @DisplayName("Title ending with hyphen but no suffix - strips and checks")
        void titleEndingWithHyphen_stripsAndChecks() {
            // Given
            // First check: "Title-" (as trimmed)
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "Title-"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "Title-");
            
            // Then - Hyphen is trailing whitespace, gets stripped to "Title-"
            assertThat(result).isEqualTo("Title-");
        }
        
        @Test
        @DisplayName("Title is single character - works correctly")
        void singleCharTitle_worksCorrectly() {
            // Given
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "A"))
                .thenReturn(true);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), "A-2"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, "A");
            
            // Then
            assertThat(result).isEqualTo("A-2");
        }
        
        @Test
        @DisplayName("Title exactly 100 chars without conflict - returns as is")
        void title100Chars_noConflict_returnsAsIs() {
            // Given
            String maxTitle = "A".repeat(100);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), maxTitle))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, maxTitle);
            
            // Then
            assertThat(result).isEqualTo(maxTitle);
            assertThat(result).hasSize(100);
        }
        
        @Test
        @DisplayName("Title exactly 100 chars with conflict - truncates for suffix")
        void title100Chars_withConflict_truncatesForSuffix() {
            // Given
            String maxTitle = "B".repeat(100);
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), maxTitle))
                .thenReturn(true);
            String expectedBase = "B".repeat(98); // 100 - 2 for "-2"
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), expectedBase + "-2"))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, maxTitle);
            
            // Then
            assertThat(result).isEqualTo(expectedBase + "-2");
            assertThat(result).hasSize(100);
        }
        
        @Test
        @DisplayName("Handles Unicode characters correctly")
        void unicodeTitle_handlesCorrectly() {
            // Given
            String unicodeTitle = "クイズ Quiz 测验";
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), unicodeTitle))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, unicodeTitle);
            
            // Then
            assertThat(result).isEqualTo(unicodeTitle);
        }
        
        @Test
        @DisplayName("Title with special characters - preserves them")
        void titleWithSpecialChars_preserves() {
            // Given
            String specialTitle = "Quiz: What's the #1 topic?";
            when(quizRepository.existsByCreatorIdAndTitle(testUser.getId(), specialTitle))
                .thenReturn(false);
            
            // When
            String result = assemblyService.ensureUniqueTitle(testUser, specialTitle);
            
            // Then
            assertThat(result).isEqualTo(specialTitle);
        }
    }
    
    // =============== Helper Methods ===============
    
    private User createUser(String username, UUID userId) {
        User user = new User();
        user.setId(userId);
        user.setUsername(username);
        user.setEmail(username + "@example.com");
        return user;
    }
    
    private Question createQuestion(String text, QuestionType type) {
        Question question = new Question();
        question.setId(UUID.randomUUID());
        question.setQuestionText(text);
        question.setType(type);
        question.setDifficulty(Difficulty.MEDIUM);
        question.setContent("{}");
        return question;
    }
}

