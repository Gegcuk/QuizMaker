services:
  quizmaker-backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/quizmakerdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_PEPPER_SECRET=${TOKEN_PEPPER_SECRET}
      - RESET_TOKEN_PEPPER=${RESET_TOKEN_PEPPER}
      - VERIFICATION_TOKEN_PEPPER=${VERIFICATION_TOKEN_PEPPER}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_PRICE_SMALL=${STRIPE_PRICE_SMALL}
      - STRIPE_PRICE_MEDIUM=${STRIPE_PRICE_MEDIUM}
      - STRIPE_PRICE_LARGE=${STRIPE_PRICE_LARGE}
      - STRIPE_PRICE_SUBSCRIPTION=${STRIPE_PRICE_SUBSCRIPTION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FRONTEND_BASE_URL=${FRONTEND_BASE_URL}
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      - mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - quizmaker-network

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=quizmakerdb
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST=%
                  # Set proper permissions
            chmod 600 .env
            
            # Make MySQL init scripts executable
            chmod +x mysql-init/*.sh 2>/dev/null || true
            
            echo "🔍 Debug: MySQL init scripts status:"
            ls -la mysql-init/ || echo "mysql-init directory not found"
            echo "🔍 Debug: Checking if init scripts are executable:"
            find mysql-init/ -name "*.sh" -exec ls -la {} \; || echo "No .sh files found"
            echo "🔍 Debug: Checking all files in mysql-init directory:"
            find mysql-init/ -type f -exec ls -la {} \; 2>/dev/null || echo "mysql-init directory not accessible"
            
            echo "✅ Environment file created"
            echo "📋 Environment file structure (without sensitive values):"
            grep -E "^[A-Z_]+=.*" .env | sed 's/=.*/=[HIDDEN]/' || true
            
            echo "🔍 Debug: Checking specific variables:"
            db_username_length=$(printf '%s' "${DB_USERNAME:-}" | wc -c)
            db_password_length=$(printf '%s' "${DB_PASSWORD:-}" | wc -c)
            db_root_password_length=$(printf '%s' "${DB_ROOT_PASSWORD:-}" | wc -c)
            echo "DB_USERNAME length: ${db_username_length}"
            echo "DB_PASSWORD length: ${db_password_length}"
            echo "DB_ROOT_PASSWORD length: ${db_root_password_length}"
            echo "DB_USERNAME value: '$DB_USERNAME'"
            echo "DB_PASSWORD first 3 chars: '$(echo "$DB_PASSWORD" | cut -c1-3)...'"
            echo "DB_ROOT_PASSWORD first 3 chars: '$(echo "$DB_ROOT_PASSWORD" | cut -c1-3)...'"
            
            echo "🔍 Debug: Environment file contents (sanitized):"
            cat .env | sed 's/=.*/=[REDACTED]/' | head -10
            
            echo "🔍 Debug: Checking if .env file exists and is readable:"
            ls -la .env || echo "❌ .env file not found!"
            
            echo "🔍 Debug: First 5 lines of .env file:"
            head -5 .env || echo "❌ Cannot read .env file!"
            
            echo "🔍 Debug: Loading .env file and checking variables:"
            set -a
            if ! source .env 2>/dev/null; then
              echo "⚠️ Warning: Failed to load .env file for debugging output."
            fi
            set +a
            echo "After loading .env:"
            echo "DB_USERNAME: '${DB_USERNAME:-NOT_SET}'"
            db_password_length=$(printf '%s' "${DB_PASSWORD:-}" | wc -c)
            db_root_password_length=$(printf '%s' "${DB_ROOT_PASSWORD:-}" | wc -c)
            echo "DB_PASSWORD length: ${db_password_length}"
            echo "DB_ROOT_PASSWORD length: ${db_root_password_length}"

      - name: Build and start backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizmaker-backend
            
            # Load environment variables from .env file
            echo "🔍 Loading environment variables from .env file..."
            set -a
            if ! source .env 2>/dev/null; then
              echo "⚠️ Warning: Failed to load .env file. Docker Compose will still use the .env file directly."
            fi
            set +a
            
            if [ -z "${MYSQL_ROOT_PASSWORD:-}" ] && [ -n "${DB_ROOT_PASSWORD:-}" ]; then
              export MYSQL_ROOT_PASSWORD="${DB_ROOT_PASSWORD}"
              echo "ℹ️  MYSQL_ROOT_PASSWORD not provided. Falling back to DB_ROOT_PASSWORD."
            fi

            if [ -z "${MYSQL_ROOT_PASSWORD:-}" ]; then
              echo "❌ MYSQL_ROOT_PASSWORD is required but not set."
              exit 1
            fi

            echo "🔍 Environment variables loaded:"
            echo "DB_USERNAME: '${DB_USERNAME:-NOT_SET}'"
            db_password_length=$(printf '%s' "${DB_PASSWORD:-}" | wc -c)
            db_root_password_length=$(printf '%s' "${DB_ROOT_PASSWORD:-}" | wc -c)
            mysql_root_password_length=$(printf '%s' "${MYSQL_ROOT_PASSWORD:-}" | wc -c)
            echo "DB_PASSWORD length: ${db_password_length}"
            echo "DB_ROOT_PASSWORD length: ${db_root_password_length}"
            echo "MYSQL_ROOT_PASSWORD length: ${mysql_root_password_length}"
            
            # Verify docker-compose.yml syntax
            echo "🔍 Verifying Docker Compose configuration..."
            docker compose config --quiet
            
            # Build and start services
            echo "🔨 Building backend container..."
            docker compose build --no-cache
            
            echo "🧹 Clearing MySQL data volume (version compatibility issue)..."
            docker compose down -v || true
            docker volume rm quizmaker-backend_mysql_data || true
            
            echo "🚀 Starting MySQL first..."
            docker compose up -d mysql
            
            echo "⏳ Waiting for MySQL to be ready before starting backend..."
            # Wait for MySQL to be healthy before starting backend
            for i in {1..60}; do
              if docker compose exec mysql mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD --silent 2>/dev/null; then
                echo "✅ MySQL is ready! Starting backend..."
                
                # Check MySQL initialization logs
                echo "🔍 Checking MySQL initialization logs..."
                docker compose logs mysql | grep -E "\[mysql-init\]|DEBUG:|ERROR:" || echo "No init logs found"
@@ -251,53 +270,56 @@ jobs:
                docker compose ps mysql
                echo "📋 Recent MySQL logs:"
                docker compose logs --tail=10 mysql
              fi
              
              if [ $i -eq 60 ]; then
                echo "❌ MySQL failed to start after 2 minutes"
                echo "📋 Final MySQL logs:"
                docker compose logs mysql
                echo "📋 MySQL environment variables:"
                docker compose exec mysql env | grep MYSQL || true
                exit 1
              fi
              echo "⏳ MySQL not ready yet, waiting... ($i/60)"
              sleep 2
            done
            
            echo "🚀 Starting backend service..."
            docker compose up -d quizmaker-backend
            
            echo "📋 Initial container status:"
            docker compose ps
            
            echo "📋 Environment variables check:"
            echo "DB_USERNAME: '${DB_USERNAME}'"
            db_password_length=$(printf '%s' "${DB_PASSWORD:-}" | wc -c)
            db_root_password_length=$(printf '%s' "${DB_ROOT_PASSWORD:-}" | wc -c)
            mysql_root_password_length=$(printf '%s' "${MYSQL_ROOT_PASSWORD:-}" | wc -c)
            echo "DB_PASSWORD: [HIDDEN - length: ${db_password_length}]"
            echo "DB_ROOT_PASSWORD: [HIDDEN - length: ${db_root_password_length}]"
            echo "MYSQL_ROOT_PASSWORD: [HIDDEN - length: ${mysql_root_password_length}]"
            
            echo "🔍 Debug: Docker Compose environment variable resolution:"
            docker compose config | grep -A 20 -B 5 "SPRING_DATASOURCE_USERNAME\|MYSQL_USER" || true
            
            echo "⏳ Waiting for backend to be ready..."
            # Wait for backend to be healthy
            for i in {1..30}; do
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Backend is ready!"
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "❌ Backend failed to start"
                echo "📋 Container status:"
                docker compose ps
                echo "📋 Backend logs:"
                docker compose logs --tail=50 quizmaker-backend
                exit 1
              fi
              echo "⏳ Backend not ready yet, waiting... ($i/30)"
              sleep 5
            done
            
            echo "✅ Backend containers started"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    ports:
      - "127.0.0.1:3306:3306"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 60s
    networks:
      - quizmaker-network
    command: --innodb-buffer-pool-size=128M --max-connections=200

volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local

networks:
  quizmaker-network:
    driver: bridge
